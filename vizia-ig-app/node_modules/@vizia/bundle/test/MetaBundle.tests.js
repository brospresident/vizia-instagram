'use strict';

const test = require('ava');
const sinon = require('sinon');

const EventEmitter = require('events');

const Bundle = require('../lib/Bundle');
const MetaBundle = require('../lib/MetaBundle');

function source(seed, times = 1) {
    let val = seed;

    return {
        source: (pipeline) => {
            for (let i = 0; i < times; i++) {
                pipeline.push({value: val});
                val += 2;
            }

            pipeline.done();
        }
    };
}

function transform() {
    return {
        transform: (data, pipeline) => {
            setTimeout(() => {
                pipeline.push(data);
                pipeline.done();
            }, Math.random() * 100);
        }
    };
}

function evenBundle() {
    const bundle = new Bundle();
    bundle.use(source(0, 5)); // 0, 2, 4, 6, 8
    bundle.use(transform());

    return bundle;
}

function oddBundle() {
    const bundle = new Bundle();
    bundle.use(source(1, 2)); // 1, 3
    bundle.use(transform());

    return bundle;
}

test.cb('construction', t => {
    const evenInstance = evenBundle();
    const oddInstance = oddBundle();
    const instance = new MetaBundle(evenInstance, oddInstance);

    t.truthy(instance instanceof EventEmitter, 'it is an event emitter');
    t.truthy(Array.isArray(instance.bundles), 'constructed an array of bundles');
    t.is(instance.bundles[0], evenInstance);
    t.is(instance.bundles[1], oddInstance);

    t.end();
});

test('load', t => {
    const evenInstance = evenBundle();
    const oddInstance = oddBundle();
    const instance = new MetaBundle(evenInstance, oddInstance);

    const evenInstanceLoadSpy = sinon.spy(evenInstance, 'load');
    const oddInstanceLoadSpy = sinon.spy(oddInstance, 'load');

    const config = {
        foo: 'bar',
        baz: 'mooey'
    };

    return instance.load(config).then(() => {
        t.is(evenInstanceLoadSpy.calledOnce, true);
        t.deepEqual(evenInstance.initialConfig, config);

        t.is(oddInstanceLoadSpy.calledOnce, true);
        t.deepEqual(oddInstance.initialConfig, config);
    });
});

test.cb('pipeline - single execution', t => {
    const evenInstance = evenBundle();
    const oddInstance = oddBundle();
    const instance = new MetaBundle(evenInstance, oddInstance);

    t.plan(2);

    instance.on('data', d => {
        t.deepEqual(d[0], [
            {value: 0},
            {value: 2},
            {value: 4},
            {value: 6},
            {value: 8}
        ]);

        t.deepEqual(d[1], [
            {value: 1},
            {value: 3}
        ]);

        instance.stop();
    });

    instance.on('end', () => t.end());

    instance.start();
});

test.cb('pipeline - re-execution', t => {
    const evenInstance = evenBundle();
    const oddInstance = oddBundle();
    const instance = new MetaBundle(evenInstance, oddInstance);

    instance.setThrottle(1000);

    let loops = 0;

    t.plan(4);

    function assertFirstExecution(d) {
        t.deepEqual(d[0], [
            {value: 0},
            {value: 2},
            {value: 4},
            {value: 6},
            {value: 8}
        ]);

        t.deepEqual(d[1], [
            {value: 1},
            {value: 3}
        ]);
    }

    function assertSecondExecution(d) {
        t.deepEqual(d[0], [
            {value: 10},
            {value: 12},
            {value: 14},
            {value: 16},
            {value: 18}
        ]);

        t.deepEqual(d[1], [
            {value: 5},
            {value: 7}
        ]);
    }

    instance.on('data', d => {
        if (loops === 0) {
            assertFirstExecution(d);
        }

        if (loops === 1) {
            assertSecondExecution(d);
            instance.stop();
            t.end();
        }

        loops++;
    });

    instance.start();
});

test.cb('pipeline errors', t => {
    const evenInstance = evenBundle();
    const oddInstance = oddBundle();
    const doesntLikeBigNumbersTransform = () => ({
        transform: (data, pipeline) => {
            if (data.value > 1) {
                return pipeline.error(new Error('your head asplode'));
            }

            pipeline.push(data);
            pipeline.done();
        }
    });

    evenInstance.use(doesntLikeBigNumbersTransform());

    const instance = new MetaBundle(evenInstance, oddInstance);

    instance.on('data', () => {
        t.fail('should not be called');
    });

    instance.on('error', e => {
        t.is(e.message, 'your head asplode');
        t.end();
    });

    instance.start();
});

test.cb('stop', t => {
    const evenInstance = evenBundle();
    const oddInstance = oddBundle();
    const instance = new MetaBundle(evenInstance, oddInstance);

    instance.start();
    instance.stop();

    t.is(instance.stopRequested, true);
    t.is(evenInstance.stopRequested, true);
    t.is(oddInstance.stopRequested, true);

    t.end();
});

test.cb('pipeline errors bubble up', t => {
    function failingsource() {
        return {
            source: (pipeline) => {
                pipeline.error(new Error('your head asplode'));
            }
        };
    }

    function brokenBundle() {
        const bundle = new Bundle();
        bundle.use(failingsource());
        bundle.use(transform());

        return bundle;
    }

    const evenInstance = evenBundle();
    const brokenInstance = brokenBundle();

    const instance = new MetaBundle(evenInstance, brokenInstance);

    instance.on('error', e => {
        t.is(e.message, 'your head asplode');
        t.end();
    });

    instance.start();
});

test.cb('order of events emitted', t => {
    const evenInstance = evenBundle();
    const oddInstance = oddBundle();
    const instance = new MetaBundle(evenInstance, oddInstance);

    t.plan(2);

    let dataCalled = false;
    let endCalled = false;

    instance.on('data', () => {
        dataCalled = true;
        t.is(endCalled, false);
    });

    instance.on('end', () => {
        endCalled = true;
        t.is(dataCalled, true);

        t.end();
    });

    instance.start();
});
