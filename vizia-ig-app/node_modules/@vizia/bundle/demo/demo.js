'use strict'

/* eslint-disable  no-console */

const Bundle = require('../');

const app = new Bundle();

app.on('end', () => { console.log('iteration ended'); });
app.on('data', (data) => { console.log('data made it through the pipe', data); });
app.on('start', () => { console.log('bundle.start() was called'); });
app.on('load', () => { console.log('bundle.load() was called'); });
app.on('stopRequested', () => { console.log('bundle was requested to stop'); });
app.on('stop', () => { console.log('bundle.stop() was called'); });
app.on('error', (err) => { console.log('bundle errored was called', err); });

// asynchronous
function source(v4d) {
  let count = 0;
  const iv = setInterval(() => {
    count += 1;
    v4d.push(count);
  }, 1000);
}

// asynchronous
function doubleTransform(data, v4d) {
  setTimeout(() => {
    v4d.push(data * 2);
    v4d.done();
  }, 200);
}

function addTransform(data, v4d) {
  v4d.push(data + v4d.config.valueToAdd);
  v4d.done();
}

// synchronous
function stringTransform(data, v4d) {
  v4d.push(data.toString());
  v4d.done();
}

function logDestination(data, v4d) {
  console.log('log destination received data:', data);
  v4d.done();
}

app.load({ valueToAdd: 1 });

app.use({ source });
app.use({ transform: doubleTransform });
app.use({ transform: addTransform });
app.use({ transform: stringTransform });

app.use({ destination: logDestination });

app.take(3);
app.setThrottle(1000);

app.start();
