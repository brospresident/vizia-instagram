'use strict';

/* eslint-disable complexity */

/**
 * Get part render props.
 * Can return bemElement property, to wrap the value in an element.
 * Can return replace property, to replace the value.
 */
const getPartRenderProps = (part, props) => {
    const {value, type} = part;
    const {currencySymbol} = props;

    switch (type) {
        case 'integer':
        case 'fraction':
            return {
                bemElement: value === '1' ? 'one' : null
            };
        case 'currency':
            return {
                bemElement: 'currency',
                replace: currencySymbol || value
            };
        case 'infinity':
        case 'nan':
            return {
                bemElement: 'invalid',
                replace: '∅' // 'null' character
            };
        case 'minusSign':
            return {
                replace: '−' // correct 'minus' character
            };
        case 'percentSign':
            return {
                bemElement: 'percent'
            };
        case 'ordinal':
            return {
                bemElement: 'ordinal'
            };
        default:
            return {};
    }
};

const renderers = {
    /**
     * String renderer
     */
    string: (component, props, children) => `${children}`,

    /**
     * HTML renderer
     */
    html: (component, props, children) => `<${component} class="${props.className}">${children}</${component}>`
};

/**
 * Render parts
 */
const render = (parts, props) => {
    const {bemBlock, output} = props;
    const renderer = typeof output === 'function' ? output : renderers[output];

    const outputParts = parts
        // Render each part
        .map((part) => {
            const {value} = part;
            const {bemElement, replace} = getPartRenderProps(part, props);
            const resultValue = replace || value;

            if (bemElement) {
                return renderer(
                    'span',
                    {className: `${bemBlock}__${bemElement}`},
                    resultValue
                );
            }
            return resultValue;
        })
        // Group any string parts together
        .reduce((result, part) => {
            const prevResultPart = result[result.length - 1] || null;

            if (typeof part === 'string' && typeof prevResultPart === 'string') {
                return [...result.slice(0, -1), `${prevResultPart}${part}`];
            }
            return [...result, part];
        }, []);

    return renderer(
        'span',
        {className: bemBlock},
        outputParts
    );
};

module.exports = render;
