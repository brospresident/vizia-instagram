'use strict';

const getIntlNumberFormatOptions = require('./get-intl-options');
const round = require('./round');
const localeData = require('../locale');

const getRoundedValue = (value, {mantissa, format}) => {
    return format === 'percent' ? round(value, mantissa + 2) : round(value, mantissa);
};

const flatten = (memo, item) => [
    ...memo,
    ...(Array.isArray(item) ? item : [item])
];

/**
 * Get ordinal part.
 * Intl does not provide ordinal suffixes, so we have to add them.
 */
const getOrdinalPart = (value, locale) => {
    const baseLocale = locale.split('-')[0];
    const ordinalValue = (localeData.ordinal[baseLocale] || localeData.ordinal.other)(value);

    return {type: 'ordinal', value: ordinalValue};
};

/**
 * Builds an array of formatted parts based on format.
 */
const getOtherFormatParts = (value, props) => {
    const {format, locale} = props;
    const roundedValue = getRoundedValue(value, props);
    const intlNumberFormatOptions = getIntlNumberFormatOptions(roundedValue, props);
    const intlNumberFormat = new Intl.NumberFormat(locale, intlNumberFormatOptions);
    const formatParts = intlNumberFormat.formatToParts(roundedValue);
    const ordinalPart = (
        format === 'ordinal'
    ) ? getOrdinalPart(roundedValue, locale) : null;

    return formatParts
        // Split integer/fraction into separate single-digit parts;
        .map((part) => {
            const {type, value} = part;
            if (['integer', 'fraction'].includes(type)) {
                return value
                    .split('')
                    .map((value) => ({type, value}));
            }
            return part;
        })
        // Add additional ordinal part
        .concat(ordinalPart || [])
        // Flatten to single array
        .reduce(flatten, []);
};

/**
 * Breaks down duration into humanized granular units.
 */
const getDurationFormatParts = (value, props) => {
    // Keep casual conversions, as this is only for humanizing
    const units = [
        ['year', 365 * 24 * 60 * 60 * 1000],
        ['month', 30 * 24 * 60 * 60 * 1000],
        ['week', 7 * 24 * 60 * 60 * 1000],
        ['day', 24 * 60 * 60 * 1000],
        ['hour', 60 * 60 * 1000],
        ['minute', 60 * 1000],
        ['second', 1000],
        ['millisecond', 1]
    ];

    const {relevantUnits} = units
        .reduce(({remainingValue, relevantUnits}, [unitName, unitValue]) => {
            const totalUnits = Math.round(remainingValue / unitValue, 0);

            if (totalUnits < 1) {
                return {remainingValue, relevantUnits};
            }
            return {
                remainingValue: remainingValue - (unitValue * totalUnits),
                relevantUnits: [...relevantUnits, [unitName, unitValue, totalUnits]]
            };
        }, {
            remainingValue: value,
            relevantUnits: []
        });

    return (relevantUnits.length ? relevantUnits : [[...units[units.length - 1], 0]])
        // Only take the largest 2 units
        .slice(0, 2)
        // Get format parts per unit
        .map(([unitName, , totalUnits]) => {
            return getOtherFormatParts(totalUnits, Object.assign({}, props, {
                format: unitName
            }));
        })
        // Add a space character between units
        .map((unitParts, i, collection) => {
            if (i < collection.length - 1) {
                return [
                    ...unitParts,
                    {type: 'literal', value: ' '}
                ];
            }
            return unitParts;
        })
        // Flatten to single array
        .reduce(flatten, []);
};

/**
 * Builds an array of formatted parts based on input.
 * We extend the result of Intl's formatToParts with our own parts to get more fine control over formatting.
 * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/formatToParts
 */
const getFormatParts = (value, props) => {
    const {format} = props;

    if (format === 'duration') {
        return getDurationFormatParts(value, props);
    }
    return getOtherFormatParts(value, props);
};

module.exports = getFormatParts;
