'use strict';

const intlNumberFormatUnits = require('./intl-number-format-units');

const shouldAbbr = (value, {abbrThreshold, abbr}) => abbr && Math.abs(value) >= abbrThreshold;

/**
 * Build Intl NumberFormat options object, based on value and props
 */
const getIntlOptions = (value, props) => {
    const {format, currency, unitDisplay} = props;

    return [
        // Determine base style options
        () => {
            if (['percent', 'currency'].includes(format)) {
                return {
                    style: format
                };
            } else if (intlNumberFormatUnits.includes(format)) {
                return {
                    style: 'unit',
                    unit: format
                };
            }
            return {
                style: 'decimal'
            };
        },
        // Unit options
        () => ({
            unitDisplay,
            currencyDisplay: 'symbol',
            currency
        }),
        // Granularity options
        (value, props) => {
            const {mantissa, trimMantissa} = props;
            const valueIsPassedThreshold = shouldAbbr(value, props);
            const minimumFractionDigits = (() => {
                if (Number.isInteger(value)) {
                    return 0;
                } else if (trimMantissa === false && !valueIsPassedThreshold) {
                    return mantissa;
                }
                return null;
            })();
            return {
                minimumFractionDigits,
                maximumFractionDigits: mantissa,
                notation: valueIsPassedThreshold ? 'compact' : 'standard'
            };
        }
    ]
        .reduce((result, processor) => Object.assign({}, result, processor(value, props)), {});
};

module.exports = getIntlOptions;
