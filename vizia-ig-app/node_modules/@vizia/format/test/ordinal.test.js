'use strict';

const test = require('ava');

const viziaFormat = require('../src');

/**
 * Ordinal default behaviour
 */

test('Ordinal defaults: Int', (t) => {
    t.is(
        viziaFormat(1, {format: 'ordinal'}),
        '1st',
        'renders as ordinal'
    );
    t.is(
        viziaFormat(2, {format: 'ordinal'}),
        '2nd',
        'renders as ordinal'
    );
    t.is(
        viziaFormat(3, {format: 'ordinal'}),
        '3rd',
        'renders as ordinal'
    );
    t.is(
        viziaFormat(4, {format: 'ordinal'}),
        '4th',
        'renders as ordinal'
    );
});

test('Ordinal defaults: Float', (t) => {
    t.is(
        viziaFormat(1234.1234, {format: 'ordinal'}),
        '1,234th',
        'renders as ordinal with no decimal points'
    );
});

test('Ordinal defaults: Negative float', (t) => {
    t.is(
        viziaFormat(-1234.1234, {format: 'ordinal'}),
        '−1,234th',
        'renders as negative ordinal with no decimal points'
    );
});

test('Ordinal defaults: Large positive float', (t) => {
    t.is(
        viziaFormat(12345.12345, {format: 'ordinal'}),
        '12,345th',
        'renders as positive unabbreviated ordinal with no decimal points'
    );
});

test('Ordinal defaults: Large negative float', (t) => {
    t.is(
        viziaFormat(-12345.12345, {format: 'ordinal'}),
        '−12,345th',
        'renders as negative unabbreviated ordinal with no decimal points'
    );
});

test('Ordinal defaults: Float equal to the default abbreviated threshold', (t) => {
    t.is(
        viziaFormat(9999.5, {format: 'ordinal'}),
        '10,000th',
        'renders as unabbreviated ordinal with no decimal points'
    );
});
