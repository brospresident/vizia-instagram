'use strict';

const test = require('ava');

require('@vizia/fake-dom');

const keyMetricTemplate = require('../../../src/components/key-metric');

test('Rendering with value', (t) => {
    const propsFixture = {
        data: {
            value: 1000
        },
        config: {}
    };
    const targetEl = document.createElement('div');
    const result = keyMetricTemplate(propsFixture);

    targetEl.innerHTML = result;

    t.is(targetEl.querySelector('.key-metric__value').textContent, '1,000', 'sets the value with number formatting');
});

test('Rendering with value and text format', (t) => {
    const propsFixture = {
        data: {
            value: 'Value',
            format: 'text'
        },
        config: {}
    };
    const targetEl = document.createElement('div');
    const result = keyMetricTemplate(propsFixture);

    targetEl.innerHTML = result;

    t.is(targetEl.querySelector('.key-metric__value').textContent, propsFixture.data.value, 'sets the value without number formatting');
});

test('Rendering with comparison value', (t) => {
    const propsFixture = {
        data: {
            value: 2,
            comparisonValue: 1
        },
        config: {}
    };
    const targetEl = document.createElement('div');
    const result = keyMetricTemplate(propsFixture);

    targetEl.innerHTML = result;

    t.is(targetEl.querySelector('.key-metric__progress').textContent.trim(), '100%', 'sets the change value');
});

test('Rendering with label', (t) => {
    const propsFixture = {
        data: {
            label: 'Total Insights',
            value: 1
        },
        config: {}
    };
    const targetEl = document.createElement('div');
    const result = keyMetricTemplate(propsFixture);

    targetEl.innerHTML = result;

    t.is(targetEl.querySelector('.key-metric__label').textContent.trim(), propsFixture.data.label, 'sets the label');
});
