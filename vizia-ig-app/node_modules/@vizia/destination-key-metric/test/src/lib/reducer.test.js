'use strict';

const test = require('ava');

const reducer = require('../../../src/lib/reducer');

test('Reducing UPDATE_CONFIG with recognised config props', (t) => {
    const state = {
        config: {
            foo: 'a'
        }
    };
    const actionData = {
        foo: 'b'
    };
    const newState = reducer(state, {
        type: 'UPDATE_CONFIG',
        data: actionData
    });

    t.not(newState, state, 'returns a new state');
    t.is(newState.config.foo, actionData.foo, 'updates the given prop');
});

test('Reducing UPDATE_CONFIG with unrecognised config props', (t) => {
    const state = {
        config: {
            foo: 'a'
        }
    };
    const actionData = {
        bar: 'a'
    };
    const newState = reducer(state, {
        type: 'UPDATE_CONFIG',
        data: actionData
    });

    t.is(state, newState, 'returns the same state');
    t.falsy(newState.config.bar, 'ignores the given prop');
});

test('Reducing UPDATE_DATA with new data', (t) => {
    const state = {
        data: {
            value: 1
        }
    };
    const actionData = {
        value: 2
    };
    const newState = reducer(state, {
        type: 'UPDATE_DATA',
        data: actionData
    });

    t.not(newState, state, 'returns a new state');
    t.deepEqual(newState.data, actionData, 'updates the data');
});

test('Reducing with unrecognised action type', (t) => {
    const state = {
        foo: 'a'
    };
    const newState = reducer(state, {
        type: 'FAKE_ACTION',
        data: {}
    });

    t.is(state, newState, 'returns the same state');
});
