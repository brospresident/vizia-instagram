'use strict';

const test = require('ava');
const SandboxedModule = require('sandboxed-module');
const sinon = require('sinon');

const fakeDom = require('@vizia/fake-dom');

const destTargetEl = document.querySelector(fakeDom.destTarget);

function requireApp() {
    const sandbox = sinon.createSandbox();
    const stubs = {};

    stubs.morphdom = sandbox.stub();
    stubs.createStore = sandbox.stub();
    stubs.store = {
        subscribe: sandbox.stub(),
        getState: sandbox.stub(),
        dispatch: sandbox.stub()
    };
    stubs.unsubscribe = sandbox.stub();
    stubs.template = sandbox.stub();

    stubs.createStore.returns(stubs.store);
    stubs.store.subscribe.returns(stubs.unsubscribe);

    return Object.assign(SandboxedModule.require('../../../src/lib/app', {
        requires: {
            morphdom: stubs.morphdom,
            './create-store': stubs.createStore,
            '../components/key-metric': stubs.template
        }
    }), {sandbox, stubs});
}

test.afterEach(() => {
    destTargetEl.innerHTML = '';
});

test('Instantiation', (t) => {
    const App = requireApp();
    const app = new App();

    t.true(app.el instanceof global.window.HTMLElement, 'instance.el is an HTML element');
    t.is(app.store, App.stubs.store, 'instance.store is a store instance');
    t.is(typeof App.stubs.store.subscribe.getCall(0).args[0], 'function', 'subscribes a handler to the store');
    t.is(app.unsubscribeFromStore, App.stubs.unsubscribe, 'instance.unsubscribe is a reference to the store unsubscriber');
});

test('Instance handling a store change', (t) => {
    const App = requireApp();
    const app = new App();
    const storeStateFixture = {
        data: {
            value: 1
        },
        config: {
            destTarget: fakeDom.destTarget
        }
    };
    const fakeTemplateResult = 'mock-html';

    App.stubs.template.returns(fakeTemplateResult);
    App.stubs.store.getState.returns(storeStateFixture);

    app.onStoreChange();

    t.is(app.destTarget.id, storeStateFixture.config.destTarget.replace('#', ''), 'sets the destTarget node on the instance');
    t.true(app.destTarget.contains(app.el), 'mounts the app element to the destTarget element');
    t.true(App.stubs.morphdom.calledWith(app.el, fakeTemplateResult), 'diffs the element with the rendered html');
});

test('Unmounting an instance', (t) => {
    const App = requireApp();
    const app = new App();

    app.destTarget = destTargetEl;
    app.destTarget.appendChild(app.el);

    app.unmount();

    t.true(App.stubs.unsubscribe.calledOnce, 'stops subscribing to the store');
    t.false(app.destTarget.contains(app.el), 'removes the element from the DOM');
});
