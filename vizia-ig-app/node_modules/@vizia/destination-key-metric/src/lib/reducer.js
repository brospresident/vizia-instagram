'use strict';

/**
 * Update config
 * Filters out irrelevant props that do not have an initial state in the store
 */
function UPDATE_CONFIG(state, props) {
    const configKeys = Object.keys(state.config);
    const filteredProps = Object.keys(props)
        .filter((propsKey) => configKeys.includes(propsKey))
        .reduce((memo, propsKey) => Object.assign(memo, {[propsKey]: props[propsKey]}), {});

    if (!Object.keys(filteredProps).length) {
        return state;
    }

    return Object.assign({}, state, {
        config: Object.assign({}, state.config, filteredProps)
    });
}

/**
 * Updates the visualisation's data
 */
function UPDATE_DATA(state, data) {
    return Object.assign({}, state, {data});
}

// Action handler map
const actionHandlers = {
    UPDATE_CONFIG,
    UPDATE_DATA
};

/**
 * Store reducer
 * Actions are in the format {type: 'ACTION_NAME', data: *}
 */
function reducer(state, action) {
    if (actionHandlers[action.type]) {
        return actionHandlers[action.type](state, action.data);
    }

    return state;
}

module.exports = reducer;
