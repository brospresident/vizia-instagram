'use strict';

const viziaFormat = require('@vizia/format');
const {icons} = require('@brandwatch/axiom-materials');

const getModifiers = require('../lib/get-modifiers');

function getProgressValue(value, comparisonValue) {
    return Math.abs((value - comparisonValue) / comparisonValue);
}

function getProgressSentimentModifier(value, comparisonValue, invertSentiment) {
    const a = invertSentiment ? comparisonValue : value;
    const b = invertSentiment ? value : comparisonValue;

    if (a < b) {
        return 'negative';
    } else if (a > b) {
        return 'positive';
    }
    return 'equal';
}

function getProgressChangeIcon(value, comparisonValue) {
    const a = value;
    const b = comparisonValue;

    if (a < b) {
        return icons['arrow-down-right'];
    } else if (a > b) {
        return icons['arrow-up-right'];
    }
    return icons['chevron-right'];
}

function iconTemplate(icon) {
    return `<svg class="icon" viewBox="${icon.viewBox}">${icon.body}</svg>`;
}

function keyMetricLabelTemplate(props) {
    const {data} = props;

    return `<div class="key-metric__label">${data.label}</div>`;
}

function keyMetricProgressTemplate(props) {
    const {data, config} = props;
    const {locale} = config;
    const progressChangeIcon = getProgressChangeIcon(data.value, data.comparisonValue);
    const formattedProgress = viziaFormat(getProgressValue(data.value, data.comparisonValue), {
        format: 'percent',
        mantissa: 0,
        locale,
        output: 'html'
    });
    const modifiers = [
        getProgressSentimentModifier(data.value, data.comparisonValue, data.invertSentiment)
    ]
        .filter((modifier) => modifier)
        .map((modifier) => `progress--${modifier}`)
        .join(' ');

    return `
        <div class="key-metric__progress">
            <span class="progress ${modifiers}">
                <span class="progress__icon">${iconTemplate(progressChangeIcon)}</span>
                <span class="progress__value">${formattedProgress}</span>
            </span>
        </div>
    `.trim();
}

function keyMetricHeaderTemplate(props) {
    const {data} = props;

    if (!data.label && data.comparisonValue === undefined) {
        return '';
    }

    return `
        <div class="key-metric__header">
            ${data.label ? keyMetricLabelTemplate(props) : ''}
            ${data.comparisonValue !== undefined && props.format !== 'text' ? keyMetricProgressTemplate(props) : ''}
        </div>
    `.trim();
}

function keyMetricValueTemplate(props) {
    const {data, config} = props;
    const {locale} = config;
    const formattedValue = data.format === 'text' ? data.value : viziaFormat(data.value, {
        format: data.format,
        currency: data.currency,
        currencySymbol: data.currencySymbol,
        locale,
        output: 'html'
    });
    const modifiers = getModifiers('key-metric__value', {
        long: data.format === 'text' || `${formattedValue}`.replace(/<[^>]+>/g, '').length >= 10
    });

    return `<div class="key-metric__value ${modifiers}">${formattedValue}</div>`;
}

function template(props) {
    return `
        <div class="key-metric-container">
            <div class="key-metric">
                ${keyMetricHeaderTemplate(props)}
                ${keyMetricValueTemplate(props)}
            </div>
        </div>
    `.trim();
}

module.exports = template;
