{"remainingRequest":"/Users/pantu/.npm/_npx/64608/lib/node_modules/@vizia/app-emulator/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/pantu/work2/vizia-ig-app/node_modules/morphdom/dist/morphdom.js","dependencies":[{"path":"/Users/pantu/work2/vizia-ig-app/node_modules/morphdom/dist/morphdom.js","mtime":1664781787029},{"path":"/Users/pantu/.npm/_npx/64608/lib/node_modules/@vizia/app-emulator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pantu/.npm/_npx/64608/lib/node_modules/@vizia/app-emulator/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["DOCUMENT_FRAGMENT_NODE","morphAttrs","fromNode","toNode","toNodeAttrs","attributes","attr","attrName","attrNamespaceURI","attrValue","fromValue","nodeType","i","length","name","namespaceURI","value","localName","getAttributeNS","prefix","setAttributeNS","getAttribute","setAttribute","fromNodeAttrs","d","hasAttributeNS","removeAttributeNS","hasAttribute","removeAttribute","range","NS_XHTML","doc","document","undefined","HAS_TEMPLATE_SUPPORT","createElement","HAS_RANGE_SUPPORT","createRange","createFragmentFromTemplate","str","template","innerHTML","content","childNodes","createFragmentFromRange","selectNode","body","fragment","createContextualFragment","createFragmentFromWrap","toElement","trim","compareNodeNames","fromEl","toEl","fromNodeName","nodeName","toNodeName","fromCodeStart","toCodeStart","charCodeAt","toUpperCase","createElementNS","moveChildren","curChild","firstChild","nextChild","nextSibling","appendChild","syncBooleanAttrProp","specialElHandlers","OPTION","parentNode","parentName","selected","selectedIndex","INPUT","TEXTAREA","newValue","oldValue","nodeValue","placeholder","SELECT","optgroup","ELEMENT_NODE","DOCUMENT_FRAGMENT_NODE$1","TEXT_NODE","COMMENT_NODE","noop","defaultGetNodeKey","node","id","morphdomFactory","morphdom","options","toNodeHtml","getNodeKey","onBeforeNodeAdded","onNodeAdded","onBeforeElUpdated","onElUpdated","onBeforeNodeDiscarded","onNodeDiscarded","onBeforeElChildrenUpdated","childrenOnly","fromNodesLookup","Object","create","keyedRemovalList","addKeyedRemoval","key","push","walkDiscardedChildNodes","skipKeyedNodes","removeNode","removeChild","indexTree","handleNodeAdded","el","unmatchedFromEl","replaceChild","morphEl","cleanupFromEl","curFromNodeChild","curFromNodeKey","fromNextSibling","toElKey","morphChildren","curToNodeChild","curToNodeKey","toNextSibling","matchingFromEl","outer","isSameNode","curFromNodeType","isCompatible","insertBefore","onBeforeNodeAddedResult","actualize","ownerDocument","specialElHandler","morphedNode","morphedNodeType","toNodeType","len","elToRemove","module","exports"],"sources":["/Users/pantu/work2/vizia-ig-app/node_modules/morphdom/dist/morphdom.js"],"sourcesContent":["'use strict';\n\nvar DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction morphAttrs(fromNode, toNode) {\n    var toNodeAttrs = toNode.attributes;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    // document-fragments dont have attributes so lets not do anything\n    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      return;\n    }\n\n    // update attributes on original DOM element\n    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {\n        attr = toNodeAttrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                if (attr.prefix === 'xmlns'){\n                    attrName = attr.name; // It's not allowed to set an attribute with the XMLNS namespace without specifying the `xmlns` prefix\n                }\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    var fromNodeAttrs = fromNode.attributes;\n\n    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {\n        attr = fromNodeAttrs[d];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n\n            if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {\n                fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n            }\n        } else {\n            if (!toNode.hasAttribute(attrName)) {\n                fromNode.removeAttribute(attrName);\n            }\n        }\n    }\n}\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\nvar HAS_TEMPLATE_SUPPORT = !!doc && 'content' in doc.createElement('template');\nvar HAS_RANGE_SUPPORT = !!doc && doc.createRange && 'createContextualFragment' in doc.createRange();\n\nfunction createFragmentFromTemplate(str) {\n    var template = doc.createElement('template');\n    template.innerHTML = str;\n    return template.content.childNodes[0];\n}\n\nfunction createFragmentFromRange(str) {\n    if (!range) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment = range.createContextualFragment(str);\n    return fragment.childNodes[0];\n}\n\nfunction createFragmentFromWrap(str) {\n    var fragment = doc.createElement('body');\n    fragment.innerHTML = str;\n    return fragment.childNodes[0];\n}\n\n/**\n * This is about the same\n * var html = new DOMParser().parseFromString(str, 'text/html');\n * return html.body.firstChild;\n *\n * @method toElement\n * @param {String} str\n */\nfunction toElement(str) {\n    str = str.trim();\n    if (HAS_TEMPLATE_SUPPORT) {\n      // avoid restrictions on content for things like `<tr><th>Hi</th></tr>` which\n      // createContextualFragment doesn't support\n      // <template> support not available in IE\n      return createFragmentFromTemplate(str);\n    } else if (HAS_RANGE_SUPPORT) {\n      return createFragmentFromRange(str);\n    }\n\n    return createFragmentFromWrap(str);\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n    var fromCodeStart, toCodeStart;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    fromCodeStart = fromNodeName.charCodeAt(0);\n    toCodeStart = toNodeName.charCodeAt(0);\n\n    // If the target element is a virtual DOM node or SVG node then we may\n    // need to normalize the tag name before comparing. Normal HTML elements that are\n    // in the \"http://www.w3.org/1999/xhtml\"\n    // are converted to upper case\n    if (fromCodeStart <= 90 && toCodeStart >= 97) { // from is upper and to is lower\n        return fromNodeName === toNodeName.toUpperCase();\n    } else if (toCodeStart <= 90 && fromCodeStart >= 97) { // to is upper and from is lower\n        return toNodeName === fromNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name);\n        }\n    }\n}\n\nvar specialElHandlers = {\n    OPTION: function(fromEl, toEl) {\n        var parentNode = fromEl.parentNode;\n        if (parentNode) {\n            var parentName = parentNode.nodeName.toUpperCase();\n            if (parentName === 'OPTGROUP') {\n                parentNode = parentNode.parentNode;\n                parentName = parentNode && parentNode.nodeName.toUpperCase();\n            }\n            if (parentName === 'SELECT' && !parentNode.hasAttribute('multiple')) {\n                if (fromEl.hasAttribute('selected') && !toEl.selected) {\n                    // Workaround for MS Edge bug where the 'selected' attribute can only be\n                    // removed if set to a non-empty value:\n                    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n                    fromEl.setAttribute('selected', 'selected');\n                    fromEl.removeAttribute('selected');\n                }\n                // We have to reset select element's selectedIndex to -1, otherwise setting\n                // fromEl.selected using the syncBooleanAttrProp below has no effect.\n                // The correct selectedIndex will be set in the SELECT special handler below.\n                parentNode.selectedIndex = -1;\n            }\n        }\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!toEl.hasAttribute('value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!toEl.hasAttribute('multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            // We have to loop through children of fromEl, not toEl since nodes can be moved\n            // from toEl to fromEl directly when morphing.\n            // At the time this special handler is invoked, all children have already been morphed\n            // and appended to / removed from fromEl, so using fromEl here is safe and correct.\n            var curChild = fromEl.firstChild;\n            var optgroup;\n            var nodeName;\n            while(curChild) {\n                nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();\n                if (nodeName === 'OPTGROUP') {\n                    optgroup = curChild;\n                    curChild = optgroup.firstChild;\n                } else {\n                    if (nodeName === 'OPTION') {\n                        if (curChild.hasAttribute('selected')) {\n                            selectedIndex = i;\n                            break;\n                        }\n                        i++;\n                    }\n                    curChild = curChild.nextSibling;\n                    if (!curChild && optgroup) {\n                        curChild = optgroup.nextSibling;\n                        optgroup = null;\n                    }\n                }\n            }\n\n            fromEl.selectedIndex = selectedIndex;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar DOCUMENT_FRAGMENT_NODE$1 = 11;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n  if (node) {\n      return (node.getAttribute && node.getAttribute('id')) || node.id;\n  }\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n    return function morphdom(fromNode, toNode, options) {\n        if (!options) {\n            options = {};\n        }\n\n        if (typeof toNode === 'string') {\n            if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML' || fromNode.nodeName === 'BODY') {\n                var toNodeHtml = toNode;\n                toNode = doc.createElement('html');\n                toNode.innerHTML = toNodeHtml;\n            } else {\n                toNode = toElement(toNode);\n            }\n        }\n\n        var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n        var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n        var onNodeAdded = options.onNodeAdded || noop;\n        var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n        var onElUpdated = options.onElUpdated || noop;\n        var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n        var onNodeDiscarded = options.onNodeDiscarded || noop;\n        var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n        var childrenOnly = options.childrenOnly === true;\n\n        // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n        var fromNodesLookup = Object.create(null);\n        var keyedRemovalList = [];\n\n        function addKeyedRemoval(key) {\n            keyedRemovalList.push(key);\n        }\n\n        function walkDiscardedChildNodes(node, skipKeyedNodes) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n\n                    var key = undefined;\n\n                    if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n                        // If we are skipping keyed nodes then we add the key\n                        // to a list so that it can be handled at the very end.\n                        addKeyedRemoval(key);\n                    } else {\n                        // Only report the node as discarded if it is not keyed. We do this because\n                        // at the end we loop through all keyed elements that were unmatched\n                        // and then discard them in one final pass.\n                        onNodeDiscarded(curChild);\n                        if (curChild.firstChild) {\n                            walkDiscardedChildNodes(curChild, skipKeyedNodes);\n                        }\n                    }\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        /**\n         * Removes a DOM node out of the original DOM\n         *\n         * @param  {Node} node The node to remove\n         * @param  {Node} parentNode The nodes parent\n         * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n         * @return {undefined}\n         */\n        function removeNode(node, parentNode, skipKeyedNodes) {\n            if (onBeforeNodeDiscarded(node) === false) {\n                return;\n            }\n\n            if (parentNode) {\n                parentNode.removeChild(node);\n            }\n\n            onNodeDiscarded(node);\n            walkDiscardedChildNodes(node, skipKeyedNodes);\n        }\n\n        // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n        // function indexTree(root) {\n        //     var treeWalker = document.createTreeWalker(\n        //         root,\n        //         NodeFilter.SHOW_ELEMENT);\n        //\n        //     var el;\n        //     while((el = treeWalker.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n        //\n        // function indexTree(node) {\n        //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n        //     var el;\n        //     while((el = nodeIterator.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        function indexTree(node) {\n            if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n                var curChild = node.firstChild;\n                while (curChild) {\n                    var key = getNodeKey(curChild);\n                    if (key) {\n                        fromNodesLookup[key] = curChild;\n                    }\n\n                    // Walk recursively\n                    indexTree(curChild);\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        indexTree(fromNode);\n\n        function handleNodeAdded(el) {\n            onNodeAdded(el);\n\n            var curChild = el.firstChild;\n            while (curChild) {\n                var nextSibling = curChild.nextSibling;\n\n                var key = getNodeKey(curChild);\n                if (key) {\n                    var unmatchedFromEl = fromNodesLookup[key];\n                    // if we find a duplicate #id node in cache, replace `el` with cache value\n                    // and morph it to the child node.\n                    if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n                        curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n                        morphEl(unmatchedFromEl, curChild);\n                    } else {\n                      handleNodeAdded(curChild);\n                    }\n                } else {\n                  // recursively call for curChild and it's children to see if we find something in\n                  // fromNodesLookup\n                  handleNodeAdded(curChild);\n                }\n\n                curChild = nextSibling;\n            }\n        }\n\n        function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {\n            // We have processed all of the \"to nodes\". If curFromNodeChild is\n            // non-null then we still have some from nodes left over that need\n            // to be removed\n            while (curFromNodeChild) {\n                var fromNextSibling = curFromNodeChild.nextSibling;\n                if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n                    // Since the node is keyed it might be matched up later so we defer\n                    // the actual removal to later\n                    addKeyedRemoval(curFromNodeKey);\n                } else {\n                    // NOTE: we skip nested keyed nodes from being removed since there is\n                    //       still a chance they will be matched up later\n                    removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                }\n                curFromNodeChild = fromNextSibling;\n            }\n        }\n\n        function morphEl(fromEl, toEl, childrenOnly) {\n            var toElKey = getNodeKey(toEl);\n\n            if (toElKey) {\n                // If an element with an ID is being morphed then it will be in the final\n                // DOM so clear it out of the saved elements collection\n                delete fromNodesLookup[toElKey];\n            }\n\n            if (!childrenOnly) {\n                // optional\n                if (onBeforeElUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n\n                // update attributes on original DOM element first\n                morphAttrs(fromEl, toEl);\n                // optional\n                onElUpdated(fromEl);\n\n                if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n            }\n\n            if (fromEl.nodeName !== 'TEXTAREA') {\n              morphChildren(fromEl, toEl);\n            } else {\n              specialElHandlers.TEXTAREA(fromEl, toEl);\n            }\n        }\n\n        function morphChildren(fromEl, toEl) {\n            var curToNodeChild = toEl.firstChild;\n            var curFromNodeChild = fromEl.firstChild;\n            var curToNodeKey;\n            var curFromNodeKey;\n\n            var fromNextSibling;\n            var toNextSibling;\n            var matchingFromEl;\n\n            // walk the children\n            outer: while (curToNodeChild) {\n                toNextSibling = curToNodeChild.nextSibling;\n                curToNodeKey = getNodeKey(curToNodeChild);\n\n                // walk the fromNode children all the way through\n                while (curFromNodeChild) {\n                    fromNextSibling = curFromNodeChild.nextSibling;\n\n                    if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n                        curToNodeChild = toNextSibling;\n                        curFromNodeChild = fromNextSibling;\n                        continue outer;\n                    }\n\n                    curFromNodeKey = getNodeKey(curFromNodeChild);\n\n                    var curFromNodeType = curFromNodeChild.nodeType;\n\n                    // this means if the curFromNodeChild doesnt have a match with the curToNodeChild\n                    var isCompatible = undefined;\n\n                    if (curFromNodeType === curToNodeChild.nodeType) {\n                        if (curFromNodeType === ELEMENT_NODE) {\n                            // Both nodes being compared are Element nodes\n\n                            if (curToNodeKey) {\n                                // The target node has a key so we want to match it up with the correct element\n                                // in the original DOM tree\n                                if (curToNodeKey !== curFromNodeKey) {\n                                    // The current element in the original DOM tree does not have a matching key so\n                                    // let's check our lookup to see if there is a matching element in the original\n                                    // DOM tree\n                                    if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                                        if (fromNextSibling === matchingFromEl) {\n                                            // Special case for single element removals. To avoid removing the original\n                                            // DOM node out of the tree (since that can break CSS transitions, etc.),\n                                            // we will instead discard the current node and wait until the next\n                                            // iteration to properly match up the keyed target element with its matching\n                                            // element in the original tree\n                                            isCompatible = false;\n                                        } else {\n                                            // We found a matching keyed element somewhere in the original DOM tree.\n                                            // Let's move the original DOM node into the current position and morph\n                                            // it.\n\n                                            // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                                            // the `removeNode()` function for the node that is being discarded so that\n                                            // all lifecycle hooks are correctly invoked\n                                            fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                                            // fromNextSibling = curFromNodeChild.nextSibling;\n\n                                            if (curFromNodeKey) {\n                                                // Since the node is keyed it might be matched up later so we defer\n                                                // the actual removal to later\n                                                addKeyedRemoval(curFromNodeKey);\n                                            } else {\n                                                // NOTE: we skip nested keyed nodes from being removed since there is\n                                                //       still a chance they will be matched up later\n                                                removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                                            }\n\n                                            curFromNodeChild = matchingFromEl;\n                                        }\n                                    } else {\n                                        // The nodes are not compatible since the \"to\" node has a key and there\n                                        // is no matching keyed node in the source tree\n                                        isCompatible = false;\n                                    }\n                                }\n                            } else if (curFromNodeKey) {\n                                // The original has a key\n                                isCompatible = false;\n                            }\n\n                            isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n                            if (isCompatible) {\n                                // We found compatible DOM elements so transform\n                                // the current \"from\" node to match the current\n                                // target DOM node.\n                                // MORPH\n                                morphEl(curFromNodeChild, curToNodeChild);\n                            }\n\n                        } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n                            // Both nodes being compared are Text or Comment nodes\n                            isCompatible = true;\n                            // Simply update nodeValue on the original node to\n                            // change the text value\n                            if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                                curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n                            }\n\n                        }\n                    }\n\n                    if (isCompatible) {\n                        // Advance both the \"to\" child and the \"from\" child since we found a match\n                        // Nothing else to do as we already recursively called morphChildren above\n                        curToNodeChild = toNextSibling;\n                        curFromNodeChild = fromNextSibling;\n                        continue outer;\n                    }\n\n                    // No compatible match so remove the old node from the DOM and continue trying to find a\n                    // match in the original DOM. However, we only do this if the from node is not keyed\n                    // since it is possible that a keyed node might match up with a node somewhere else in the\n                    // target tree and we don't want to discard it just yet since it still might find a\n                    // home in the final DOM tree. After everything is done we will remove any keyed nodes\n                    // that didn't find a home\n                    if (curFromNodeKey) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                    } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                    }\n\n                    curFromNodeChild = fromNextSibling;\n                } // END: while(curFromNodeChild) {}\n\n                // If we got this far then we did not find a candidate match for\n                // our \"to node\" and we exhausted all of the children \"from\"\n                // nodes. Therefore, we will just append the current \"to\" node\n                // to the end\n                if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n                    fromEl.appendChild(matchingFromEl);\n                    // MORPH\n                    morphEl(matchingFromEl, curToNodeChild);\n                } else {\n                    var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n                    if (onBeforeNodeAddedResult !== false) {\n                        if (onBeforeNodeAddedResult) {\n                            curToNodeChild = onBeforeNodeAddedResult;\n                        }\n\n                        if (curToNodeChild.actualize) {\n                            curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n                        }\n                        fromEl.appendChild(curToNodeChild);\n                        handleNodeAdded(curToNodeChild);\n                    }\n                }\n\n                curToNodeChild = toNextSibling;\n                curFromNodeChild = fromNextSibling;\n            }\n\n            cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);\n\n            var specialElHandler = specialElHandlers[fromEl.nodeName];\n            if (specialElHandler) {\n                specialElHandler(fromEl, toEl);\n            }\n        } // END: morphChildren(...)\n\n        var morphedNode = fromNode;\n        var morphedNodeType = morphedNode.nodeType;\n        var toNodeType = toNode.nodeType;\n\n        if (!childrenOnly) {\n            // Handle the case where we are given two DOM nodes that are not\n            // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n            if (morphedNodeType === ELEMENT_NODE) {\n                if (toNodeType === ELEMENT_NODE) {\n                    if (!compareNodeNames(fromNode, toNode)) {\n                        onNodeDiscarded(fromNode);\n                        morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n                    }\n                } else {\n                    // Going from an element node to a text node\n                    morphedNode = toNode;\n                }\n            } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n                if (toNodeType === morphedNodeType) {\n                    if (morphedNode.nodeValue !== toNode.nodeValue) {\n                        morphedNode.nodeValue = toNode.nodeValue;\n                    }\n\n                    return morphedNode;\n                } else {\n                    // Text node to something else\n                    morphedNode = toNode;\n                }\n            }\n        }\n\n        if (morphedNode === toNode) {\n            // The \"to node\" was not compatible with the \"from node\" so we had to\n            // toss out the \"from node\" and use the \"to node\"\n            onNodeDiscarded(fromNode);\n        } else {\n            if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {\n                return;\n            }\n\n            morphEl(morphedNode, toNode, childrenOnly);\n\n            // We now need to loop over any keyed nodes that might need to be\n            // removed. We only do the removal if we know that the keyed node\n            // never found a match. When a keyed node is matched up we remove\n            // it out of fromNodesLookup and we use fromNodesLookup to determine\n            // if a keyed node has been matched up or not\n            if (keyedRemovalList) {\n                for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n                    var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n                    if (elToRemove) {\n                        removeNode(elToRemove, elToRemove.parentNode, false);\n                    }\n                }\n            }\n        }\n\n        if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n            if (morphedNode.actualize) {\n                morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n            }\n            // If we had to swap out the from node with a new node because the old\n            // node was not compatible with the target node then we need to\n            // replace the old DOM node in the original DOM tree. This is only\n            // possible if the original DOM node was part of a DOM tree which\n            // we know is the case if it has a parent node.\n            fromNode.parentNode.replaceChild(morphedNode, fromNode);\n        }\n\n        return morphedNode;\n    };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\nmodule.exports = morphdom;\n"],"mappings":"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"}]}