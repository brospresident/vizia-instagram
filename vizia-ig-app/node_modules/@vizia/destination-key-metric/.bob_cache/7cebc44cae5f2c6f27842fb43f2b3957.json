{"remainingRequest":"/Users/pantu/.npm/_npx/5593/lib/node_modules/@vizia/app-emulator/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/pantu/work2/vizia/node_modules/redux/lib/redux.js","dependencies":[{"path":"/Users/pantu/work2/vizia/node_modules/redux/lib/redux.js","mtime":1664781788263},{"path":"/Users/pantu/.npm/_npx/5593/lib/node_modules/@vizia/app-emulator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pantu/.npm/_npx/5593/lib/node_modules/@vizia/app-emulator/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Object","defineProperty","exports","value","_objectSpread","require","_interopDefaultLegacy","e","_objectSpread__default","formatProdErrorMessage","code","$$observable","Symbol","observable","randomString","Math","random","toString","substring","split","join","ActionTypes","INIT","REPLACE","PROBE_UNKNOWN_ACTION","isPlainObject","obj","proto","getPrototypeOf","miniKindOf","val","type","Array","isArray","isDate","isError","constructorName","ctorName","slice","toLowerCase","replace","constructor","name","Error","message","stackTraceLimit","Date","toDateString","getDate","setDate","kindOf","typeOfVal","process","env","NODE_ENV","createStore","reducer","preloadedState","enhancer","_ref2","arguments","undefined","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","getState","subscribe","listener","isSubscribed","push","unsubscribe","index","indexOf","splice","dispatch","action","listeners","i","length","replaceReducer","nextReducer","_ref","outerSubscribe","observer","observeState","next","legacy_createStore","warning","console","error","getUnexpectedStateShapeWarningMessage","inputState","reducers","unexpectedKeyCache","reducerKeys","keys","argumentName","unexpectedKeys","filter","key","hasOwnProperty","forEach","assertReducerShape","initialState","combineReducers","finalReducers","finalReducerKeys","shapeAssertionError","combination","state","warningMessage","hasChanged","nextState","_i","_key","previousStateForKey","nextStateForKey","actionType","String","bindActionCreator","actionCreator","apply","bindActionCreators","actionCreators","boundActionCreators","compose","_len","funcs","arg","reduce","a","b","applyMiddleware","middlewares","store","_dispatch","middlewareAPI","chain","map","middleware","isCrushed","__DO_NOT_USE__ActionTypes"],"sources":["/Users/pantu/work2/vizia/node_modules/redux/lib/redux.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar _objectSpread = require('@babel/runtime/helpers/objectSpread2');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar _objectSpread__default = /*#__PURE__*/_interopDefaultLegacy(_objectSpread);\n\n/**\n * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js\n *\n * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes\n * during build.\n * @param {number} code\n */\nfunction formatProdErrorMessage(code) {\n  return \"Minified Redux error #\" + code + \"; visit https://redux.js.org/Errors?code=\" + code + \" for the full message or \" + 'use the non-minified dev environment for full errors. ';\n}\n\n// Inlined version of the `symbol-observable` polyfill\nvar $$observable = (function () {\n  return typeof Symbol === 'function' && Symbol.observable || '@@observable';\n})();\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split('').join('.');\n};\n\nvar ActionTypes = {\n  INIT: \"@@redux/INIT\" + randomString(),\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n  }\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false;\n  var proto = obj;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n\n// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of\nfunction miniKindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n  var type = typeof val;\n\n  switch (type) {\n    case 'boolean':\n    case 'string':\n    case 'number':\n    case 'symbol':\n    case 'function':\n      {\n        return type;\n      }\n  }\n\n  if (Array.isArray(val)) return 'array';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  var constructorName = ctorName(val);\n\n  switch (constructorName) {\n    case 'Symbol':\n    case 'Promise':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Map':\n    case 'Set':\n      return constructorName;\n  } // other\n\n\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n}\n\nfunction ctorName(val) {\n  return typeof val.constructor === 'function' ? val.constructor.name : null;\n}\n\nfunction isError(val) {\n  return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';\n}\n\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';\n}\n\nfunction kindOf(val) {\n  var typeOfVal = typeof val;\n\n  if (process.env.NODE_ENV !== 'production') {\n    typeOfVal = miniKindOf(val);\n  }\n\n  return typeOfVal;\n}\n\n/**\n * @deprecated\n *\n * **We recommend using the `configureStore` method\n * of the `@reduxjs/toolkit` package**, which replaces `createStore`.\n *\n * Redux Toolkit is our recommended approach for writing Redux logic today,\n * including store setup, reducers, data fetching, and more.\n *\n * **For more details, please read this Redux docs page:**\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * `configureStore` from Redux Toolkit is an improved version of `createStore` that\n * simplifies setup and helps avoid common bugs.\n *\n * You should not be using the `redux` core package by itself today, except for learning purposes.\n * The `createStore` method from the core `redux` package will not be removed, but we encourage\n * all users to migrate to using Redux Toolkit for all Redux code.\n *\n * If you want to use `createStore` without this visual deprecation warning, use\n * the `legacy_createStore` import instead:\n *\n * `import { legacy_createStore as createStore} from 'redux'`\n *\n */\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(0) : 'It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.');\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(1) : \"Expected the enhancer to be a function. Instead, received: '\" + kindOf(enhancer) + \"'\");\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(2) : \"Expected the root reducer to be a function. Instead, received: '\" + kindOf(reducer) + \"'\");\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(3) : 'You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(4) : \"Expected the listener to be a function. Instead, received: '\" + kindOf(listener) + \"'\");\n    }\n\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(5) : 'You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(6) : 'You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n      currentListeners = null;\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(7) : \"Actions must be plain objects. Instead, the actual type was: '\" + kindOf(action) + \"'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.\");\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(8) : 'Actions may not have an undefined \"type\" property. You may have misspelled an action type string constant.');\n    }\n\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(9) : 'Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(10) : \"Expected the nextReducer to be a function. Instead, received: '\" + kindOf(nextReducer));\n    }\n\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(11) : \"Expected the observer to be an object. Instead, received: '\" + kindOf(observer) + \"'\");\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n/**\n * Creates a Redux store that holds the state tree.\n *\n * **We recommend using `configureStore` from the\n * `@reduxjs/toolkit` package**, which replaces `createStore`:\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nvar legacy_createStore = createStore;\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + kindOf(inputState) + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(12) : \"The slice reducer for key \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n    }\n\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(13) : \"The slice reducer for key \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle '\" + ActionTypes.INIT + \"' or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n  // keys multiple times.\n\n  var unexpectedKeyCache;\n\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError;\n\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === 'undefined') {\n        var actionType = action && action.type;\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(14) : \"When called with an action of type \" + (actionType ? \"\\\"\" + String(actionType) + \"\\\"\" : '(unknown type)') + \", the slice reducer for key \\\"\" + _key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\");\n      }\n\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(16) : \"bindActionCreators expected an object or a function, but instead received: '\" + kindOf(actionCreators) + \"'. \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n  }\n\n  var boundActionCreators = {};\n\n  for (var key in actionCreators) {\n    var actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n\n  return boundActionCreators;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n\n      var _dispatch = function dispatch() {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(15) : 'Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return _objectSpread__default['default'](_objectSpread__default['default']({}, store), {}, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\n\nfunction isCrushed() {}\n\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \"production\". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');\n}\n\nexports.__DO_NOT_USE__ActionTypes = ActionTypes;\nexports.applyMiddleware = applyMiddleware;\nexports.bindActionCreators = bindActionCreators;\nexports.combineReducers = combineReducers;\nexports.compose = compose;\nexports.createStore = createStore;\nexports.legacy_createStore = legacy_createStore;\n"],"mappings":"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"}]}