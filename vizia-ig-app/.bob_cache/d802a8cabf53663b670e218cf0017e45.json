{"remainingRequest":"/Users/pantu/.npm/_npx/64608/lib/node_modules/@vizia/app-emulator/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/pantu/work2/vizia-ig-app/node_modules/readable-stream/lib/_stream_transform.js","dependencies":[{"path":"/Users/pantu/work2/vizia-ig-app/node_modules/readable-stream/lib/_stream_transform.js","mtime":1664781788335},{"path":"/Users/pantu/.npm/_npx/64608/lib/node_modules/@vizia/app-emulator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pantu/.npm/_npx/64608/lib/node_modules/@vizia/app-emulator/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["module","exports","Transform","Duplex","require","util","Object","create","inherits","afterTransform","er","data","ts","_transformState","transforming","cb","writecb","emit","Error","writechunk","push","rs","_readableState","reading","needReadable","length","highWaterMark","_read","options","call","bind","needTransform","writeencoding","sync","transform","_transform","flush","_flush","on","prefinish","_this","done","prototype","chunk","encoding","_write","n","_destroy","err","_this2","err2","stream","_writableState"],"sources":["/Users/pantu/work2/vizia-ig-app/node_modules/readable-stream/lib/_stream_transform.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}"],"mappings":"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"}]}